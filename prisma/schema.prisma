generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model availability {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  listing_id     String    @db.Uuid
  available_date DateTime  @db.Date
  start_time     DateTime  @db.Timestamptz(6)
  end_time       DateTime  @db.Timestamptz(6)
  max_orders     Int
  orders_taken   Int?      @default(0)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  listings       listings  @relation(fields: [listing_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model listings {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cook_id         String         @db.Uuid
  title           String
  description     String?
  price           Decimal        @db.Decimal(10, 2)
  image_url       String?
  cuisine         String?
  dietary_tags    String[]       @default([])
  pickup_location String?
  is_active       Boolean?       @default(true)
  created_at      DateTime?      @default(now()) @db.Timestamptz(6)
  availability    availability[]
  profiles        profiles       @relation(fields: [cook_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders          orders[]
  reviews         reviews[]

  @@schema("public")
}

model orders {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id    String    @db.Uuid
  listing_id     String    @db.Uuid
  quantity       Int
  total_price    Decimal   @db.Decimal(10, 2)
  scheduled_date DateTime  @db.Date
  pickup_time    DateTime? @db.Timestamptz(6)
  status         String?
  payment_status String?
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  profiles       profiles  @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  listings       listings  @relation(fields: [listing_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model profiles {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String       @unique @db.Uuid
  full_name       String
  profile_image   String?
  phone_number    String?      @db.VarChar(20)
  bio             String?
  is_verified     Boolean?     @default(false)
  created_at      DateTime?    @default(now()) @db.Timestamptz(6)
  restaurant_name String?
  listings        listings[]
  orders          orders[]
  reviews         reviews[]
  user_roles      user_roles[]

  @@schema("public")
}

model reviews {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id String    @db.Uuid
  listing_id  String    @db.Uuid
  rating      Int
  comment     String?
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  profiles    profiles  @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  listings    listings  @relation(fields: [listing_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_roles {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id  String   @db.Uuid
  role     String
  profiles profiles @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_roles_user")

  @@unique([user_id, role], map: "user_roles_user_id_role")
  @@schema("public")
}
